/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BtButton {
        "disabled": boolean;
        "hideText": boolean;
        /**
          * Properties for controlling button states
         */
        "loading": boolean;
        "success": boolean;
        "validate"?: boolean;
    }
    interface BtDropdown {
        "options": { [key: string]: any };
    }
    /**
     * TODO: revisar este componente , asignarle un identificador unico
     * para que las opciones seleccionadas solo afecten a este componente
     */
    interface BtMultiselect {
        "options": string;
        "selectedOptions": string;
    }
    interface BtStepItem {
        "loaded": boolean;
        /**
          * Método para ejecutar una tarea asíncrona. Notifica al padre antes y después de la ejecución.
         */
        "task": (cb: () => Promise<void>) => Promise<void>;
    }
    interface BtStepper {
        "setStep": (index: number) => Promise<void>;
        "setStepValidity": (index: number, isValid: boolean) => Promise<void>;
    }
    interface BtTable {
        "actions": { [key: string]: (row: { [key: string]: any }) => void };
        /**
          * Applies the filters to the table when the 'isAsync' property is set to true. If the 'isAsync' property is set to false, a warning is logged to the console.
          * @returns
         */
        "applyAsyncSearch": () => Promise<void>;
        "config": { [key: string]: any };
        "getAllFilteredRows": () => Promise<{ [key: string]: any; }[]>;
        /**
          * Returns all selected rows.
          * @returns
         */
        "getAllSelectedRows": () => Promise<{ [key: string]: any; }[]>;
        "headers": {
    key: string;
    label: string;
    class: string;
    cellClasses?: (cell: { [key: string]: any }) => string;
    sortable?: boolean;
    filterable?: boolean;
    editable?: boolean;
    action?: boolean;
  }[];
        /**
          * Flag to indicate if the table has async data handles search and pagination
         */
        "isAsync": boolean;
        "pageSize": number;
        "resetTable": () => Promise<void>;
        "rows": { [key: string]: any }[];
        "totalRows"?: number;
    }
}
export interface BtButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtButtonElement;
}
export interface BtDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtDropdownElement;
}
export interface BtMultiselectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtMultiselectElement;
}
export interface BtStepItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtStepItemElement;
}
export interface BtStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtStepperElement;
}
export interface BtTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBtTableElement;
}
declare global {
    interface HTMLBtButtonElementEventMap {
        "btButtonClick": { valid: boolean };
    }
    interface HTMLBtButtonElement extends Components.BtButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtButtonElementEventMap>(type: K, listener: (this: HTMLBtButtonElement, ev: BtButtonCustomEvent<HTMLBtButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtButtonElementEventMap>(type: K, listener: (this: HTMLBtButtonElement, ev: BtButtonCustomEvent<HTMLBtButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtButtonElement: {
        prototype: HTMLBtButtonElement;
        new (): HTMLBtButtonElement;
    };
    interface HTMLBtDropdownElementEventMap {
        "action": any;
    }
    interface HTMLBtDropdownElement extends Components.BtDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtDropdownElementEventMap>(type: K, listener: (this: HTMLBtDropdownElement, ev: BtDropdownCustomEvent<HTMLBtDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtDropdownElementEventMap>(type: K, listener: (this: HTMLBtDropdownElement, ev: BtDropdownCustomEvent<HTMLBtDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtDropdownElement: {
        prototype: HTMLBtDropdownElement;
        new (): HTMLBtDropdownElement;
    };
    interface HTMLBtMultiselectElementEventMap {
        "multiselectChange": Option[];
    }
    /**
     * TODO: revisar este componente , asignarle un identificador unico
     * para que las opciones seleccionadas solo afecten a este componente
     */
    interface HTMLBtMultiselectElement extends Components.BtMultiselect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtMultiselectElementEventMap>(type: K, listener: (this: HTMLBtMultiselectElement, ev: BtMultiselectCustomEvent<HTMLBtMultiselectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtMultiselectElementEventMap>(type: K, listener: (this: HTMLBtMultiselectElement, ev: BtMultiselectCustomEvent<HTMLBtMultiselectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtMultiselectElement: {
        prototype: HTMLBtMultiselectElement;
        new (): HTMLBtMultiselectElement;
    };
    interface HTMLBtStepItemElementEventMap {
        "asyncStart": void;
        "asyncEnd": void;
    }
    interface HTMLBtStepItemElement extends Components.BtStepItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtStepItemElementEventMap>(type: K, listener: (this: HTMLBtStepItemElement, ev: BtStepItemCustomEvent<HTMLBtStepItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtStepItemElementEventMap>(type: K, listener: (this: HTMLBtStepItemElement, ev: BtStepItemCustomEvent<HTMLBtStepItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtStepItemElement: {
        prototype: HTMLBtStepItemElement;
        new (): HTMLBtStepItemElement;
    };
    interface HTMLBtStepperElementEventMap {
        "step": number;
        "stepperEnd": void;
    }
    interface HTMLBtStepperElement extends Components.BtStepper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtStepperElementEventMap>(type: K, listener: (this: HTMLBtStepperElement, ev: BtStepperCustomEvent<HTMLBtStepperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtStepperElementEventMap>(type: K, listener: (this: HTMLBtStepperElement, ev: BtStepperCustomEvent<HTMLBtStepperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtStepperElement: {
        prototype: HTMLBtStepperElement;
        new (): HTMLBtStepperElement;
    };
    interface HTMLBtTableElementEventMap {
        "search": { searchText: string };
        "selection": { [key: string]: any };
        "page-size": { [key: string]: any };
        "pagination": { [key: string]: any };
        "sort": { key: string; direction: 'asc' | 'desc' | undefined };
        "filter": { filters: { [key: string]: string } };
        "cell-action": { rowId: string; action: string };
        "edit": { header: string; row: { [key: string]: any } };
    }
    interface HTMLBtTableElement extends Components.BtTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBtTableElementEventMap>(type: K, listener: (this: HTMLBtTableElement, ev: BtTableCustomEvent<HTMLBtTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBtTableElementEventMap>(type: K, listener: (this: HTMLBtTableElement, ev: BtTableCustomEvent<HTMLBtTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBtTableElement: {
        prototype: HTMLBtTableElement;
        new (): HTMLBtTableElement;
    };
    interface HTMLElementTagNameMap {
        "bt-button": HTMLBtButtonElement;
        "bt-dropdown": HTMLBtDropdownElement;
        "bt-multiselect": HTMLBtMultiselectElement;
        "bt-step-item": HTMLBtStepItemElement;
        "bt-stepper": HTMLBtStepperElement;
        "bt-table": HTMLBtTableElement;
    }
}
declare namespace LocalJSX {
    interface BtButton {
        "disabled"?: boolean;
        "hideText"?: boolean;
        /**
          * Properties for controlling button states
         */
        "loading"?: boolean;
        /**
          * Event emitted when the button is clicked
         */
        "onBtButtonClick"?: (event: BtButtonCustomEvent<{ valid: boolean }>) => void;
        "success"?: boolean;
        "validate"?: boolean;
    }
    interface BtDropdown {
        "onAction"?: (event: BtDropdownCustomEvent<any>) => void;
        "options"?: { [key: string]: any };
    }
    /**
     * TODO: revisar este componente , asignarle un identificador unico
     * para que las opciones seleccionadas solo afecten a este componente
     */
    interface BtMultiselect {
        "onMultiselectChange"?: (event: BtMultiselectCustomEvent<Option[]>) => void;
        "options"?: string;
        "selectedOptions"?: string;
    }
    interface BtStepItem {
        "loaded"?: boolean;
        "onAsyncEnd"?: (event: BtStepItemCustomEvent<void>) => void;
        "onAsyncStart"?: (event: BtStepItemCustomEvent<void>) => void;
    }
    interface BtStepper {
        "onStep"?: (event: BtStepperCustomEvent<number>) => void;
        "onStepperEnd"?: (event: BtStepperCustomEvent<void>) => void;
    }
    interface BtTable {
        "actions"?: { [key: string]: (row: { [key: string]: any }) => void };
        "config"?: { [key: string]: any };
        "headers"?: {
    key: string;
    label: string;
    class: string;
    cellClasses?: (cell: { [key: string]: any }) => string;
    sortable?: boolean;
    filterable?: boolean;
    editable?: boolean;
    action?: boolean;
  }[];
        /**
          * Flag to indicate if the table has async data handles search and pagination
         */
        "isAsync"?: boolean;
        "onCell-action"?: (event: BtTableCustomEvent<{ rowId: string; action: string }>) => void;
        "onEdit"?: (event: BtTableCustomEvent<{ header: string; row: { [key: string]: any } }>) => void;
        "onFilter"?: (event: BtTableCustomEvent<{ filters: { [key: string]: string } }>) => void;
        "onPage-size"?: (event: BtTableCustomEvent<{ [key: string]: any }>) => void;
        "onPagination"?: (event: BtTableCustomEvent<{ [key: string]: any }>) => void;
        "onSearch"?: (event: BtTableCustomEvent<{ searchText: string }>) => void;
        "onSelection"?: (event: BtTableCustomEvent<{ [key: string]: any }>) => void;
        "onSort"?: (event: BtTableCustomEvent<{ key: string; direction: 'asc' | 'desc' | undefined }>) => void;
        "pageSize"?: number;
        "rows"?: { [key: string]: any }[];
        "totalRows"?: number;
    }
    interface IntrinsicElements {
        "bt-button": BtButton;
        "bt-dropdown": BtDropdown;
        "bt-multiselect": BtMultiselect;
        "bt-step-item": BtStepItem;
        "bt-stepper": BtStepper;
        "bt-table": BtTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bt-button": LocalJSX.BtButton & JSXBase.HTMLAttributes<HTMLBtButtonElement>;
            "bt-dropdown": LocalJSX.BtDropdown & JSXBase.HTMLAttributes<HTMLBtDropdownElement>;
            /**
             * TODO: revisar este componente , asignarle un identificador unico
             * para que las opciones seleccionadas solo afecten a este componente
             */
            "bt-multiselect": LocalJSX.BtMultiselect & JSXBase.HTMLAttributes<HTMLBtMultiselectElement>;
            "bt-step-item": LocalJSX.BtStepItem & JSXBase.HTMLAttributes<HTMLBtStepItemElement>;
            "bt-stepper": LocalJSX.BtStepper & JSXBase.HTMLAttributes<HTMLBtStepperElement>;
            "bt-table": LocalJSX.BtTable & JSXBase.HTMLAttributes<HTMLBtTableElement>;
        }
    }
}
