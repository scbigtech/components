{
  "timestamp": "2024-12-09T10:26:08",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.22.3",
    "typescriptVersion": "5.5.4"
  },
  "components": [
    {
      "filePath": "src/components/bt-button/bt-button.tsx",
      "encapsulation": "shadow",
      "tag": "bt-button",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideText",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-text",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "Properties for controlling button states",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "success",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "success",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "validate",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "btButtonClick",
          "detail": "{ valid: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ valid: boolean }",
            "resolved": "{ valid: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the button is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bt-stepper",
        "bt-table"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bt-stepper": [
          "bt-button"
        ],
        "bt-table": [
          "bt-button"
        ]
      }
    },
    {
      "filePath": "src/components/bt-stepper/bt-stepper-item.tsx",
      "encapsulation": "shadow",
      "tag": "bt-step-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "loaded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loaded",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "task",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(cb: () => Promise<void>) => Promise<void>",
            "parameters": [
              {
                "name": "cb",
                "type": "() => Promise<void>",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "task(cb: () => Promise<void>) => Promise<void>",
          "parameters": [
            {
              "name": "cb",
              "type": "() => Promise<void>",
              "docs": ""
            }
          ],
          "docs": "Método para ejecutar una tarea asíncrona.\r\nNotifica al padre antes y después de la ejecución.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "asyncEnd",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "asyncStart",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/bt-stepper/bt-stepper.tsx",
      "encapsulation": "shadow",
      "tag": "bt-stepper",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "setStepValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(index: number, isValid: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "docs": ""
              },
              {
                "name": "isValid",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setStepValidity(index: number, isValid: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "index",
              "type": "number",
              "docs": ""
            },
            {
              "name": "isValid",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "step",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bt-button"
      ],
      "dependencyGraph": {
        "bt-stepper": [
          "bt-button"
        ]
      }
    },
    {
      "filePath": "src/components/bt-table/bt-table.tsx",
      "encapsulation": "shadow",
      "tag": "bt-table",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "config",
          "type": "{ [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "{ [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "{\n    next: { label: 'Next', },\n    prev: { label: 'Previous', },\n    emptyData: { label: 'No data', },\n    loading: { label: 'Loading...', },\n    error: { label: 'Error', },\n    pagesize: { label: 'Rows per page', },\n    page: { label: 'Page', },\n    rows: { label: 'Rows', },\n    select: { label: 'Select', },\n    selectall: { label: 'Select all' },\n    search: { label: 'Search' },\n    sort: { label: 'Sort' },\n    filter: { label: 'Filter' },\n  }",
          "values": [
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headers",
          "type": "{ key: string; label: string; sortable?: boolean; filterable?: boolean; action?: boolean; }[]",
          "complexType": {
            "original": "{ key: string; label: string; sortable?: boolean; filterable?: boolean; action?: boolean }[]",
            "resolved": "{ key: string; label: string; sortable?: boolean; filterable?: boolean; action?: boolean; }[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "{ key: string; label: string; sortable?: boolean; filterable?: boolean; action?: boolean; }[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isAsync",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-async",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "{ [key: string]: any; }[]",
          "complexType": {
            "original": "{ [key: string]: any }[]",
            "resolved": "{ [key: string]: any; }[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "{ [key: string]: any; }[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalRows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-rows",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "applyAsyncSearch",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<any>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<any>"
          },
          "signature": "applyAsyncSearch() => Promise<any>",
          "parameters": [],
          "docs": "Applies filters and sorting to the rows data based on the current search text,\ncolumn-specific filters, and sort configuration, but only if the table is in\nasync mode. If the table is not in async mode, it does nothing.",
          "docsTags": []
        },
        {
          "name": "getAllSelectedRows",
          "returns": {
            "type": "Promise<{ [key: string]: any; }[]>",
            "docs": "A promise that resolves to an array of all selected rows."
          },
          "complexType": {
            "signature": "() => Promise<{ [key: string]: any; }[]>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<{ [key: string]: any; }[]>"
          },
          "signature": "getAllSelectedRows() => Promise<{ [key: string]: any; }[]>",
          "parameters": [],
          "docs": "Returns a promise that resolves to an array of all rows that are currently selected.",
          "docsTags": [
            {
              "name": "returns",
              "text": "A promise that resolves to an array of all selected rows."
            }
          ]
        },
        {
          "name": "onCellAction",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(handler: (row: { [key: string]: any; }, key: string) => void) => Promise<void>",
            "parameters": [
              {
                "name": "handler",
                "type": "(row: { [key: string]: any; }, key: string) => void",
                "docs": "The function to be called when a cell is clicked."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "onCellAction(handler: (row: { [key: string]: any; }, key: string) => void) => Promise<void>",
          "parameters": [
            {
              "name": "handler",
              "type": "(row: { [key: string]: any; }, key: string) => void",
              "docs": "The function to be called when a cell is clicked."
            }
          ],
          "docs": "Sets the cell action handler function.\nThis function is called when a cell in the table is clicked.\nIt is passed the row object and column key as arguments.",
          "docsTags": [
            {
              "name": "param",
              "text": "handler The function to be called when a cell is clicked."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "filter",
          "detail": "{ filters: { [key: string]: string; }; }",
          "bubbles": true,
          "complexType": {
            "original": "{ filters: { [key: string]: string } }",
            "resolved": "{ filters: { [key: string]: string; }; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "page-size",
          "detail": "{ [key: string]: any; }",
          "bubbles": true,
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "{ [key: string]: any; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "pagination",
          "detail": "{ [key: string]: any; }",
          "bubbles": true,
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "{ [key: string]: any; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "search",
          "detail": "{ searchText: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{ searchText: string }",
            "resolved": "{ searchText: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selection",
          "detail": "{ [key: string]: any; }",
          "bubbles": true,
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "{ [key: string]: any; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "sort",
          "detail": "{ key: string; direction: \"desc\" | \"asc\"; }",
          "bubbles": true,
          "complexType": {
            "original": "{ key: string; direction: 'asc' | 'desc' }",
            "resolved": "{ key: string; direction: \"desc\" | \"asc\"; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bt-button"
      ],
      "dependencyGraph": {
        "bt-table": [
          "bt-button"
        ]
      }
    }
  ],
  "typeLibrary": {}
}